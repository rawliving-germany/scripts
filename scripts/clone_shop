#!/bin/bash

# Clone a magento instance on the same host,
# with some tough assumptions (Magento 1.5 vs Magento 2.1.9)
# and naming conventions etcpp.
# You'll need a configuration file in current working dir
# with keys as below - or adjust your setup to follow the defaults.
#
# If you do supply an argument, enter interactive mode which will ask
# sometimes for permission before actually messing up.

# Copyright 2017 Felix Wolfsteller, licensed under the GPLv3+.

set -euo pipefail

DATE=$(date +%F)
exec >  >(tee -ia clone_shop-$DATE.log)
exec 2> >(tee -ia clone_shop-$DATE.log >>&2)

conf_file="clone_shop.conf"
if [ -f "$conf_file" ]
then
  echo "Reading configuration from $conf_file."
else
  echo "Configuration file $conf_file not found, assuming defaults"
fi

typeset -A config # init array
config=( # set default values in config array
    [db_user]="user"
    [db_password]="magento"
    [old_instance_name]="old"
    [new_instance_name]="magento_2.2.1"
    [domain]="yourserver.com"
)

while read line
do
    if echo $line | grep -F = &>/dev/null
    then
        varname=$(echo "$line" | cut -d '=' -f 1)
        config[$varname]=$(echo "$line" | cut -d '=' -f 2-)
    fi
done < "$conf_file"

function sync_files {
  echo "Syncing files"
  rsync -a "/var/www/${config[old_instance_name]}.${config[domain]}/" "/var/www/${config[new_instance_name]}.${config[domain]}" --exclude "var/"
}

function adjust_app_conf {
  echo "Adjust m2 configuration file"
  sed -i "/var/www/${config[new_instance_name]}.${config[domain]}/app/etc/env.php" -e "s/${config[old_instance_name]}/${config[new_instance_name]}/g"
}

function create_db {
  echo "Creating db"
  MYSQL_PWD="${config[db_password]}" mysql -u "${config[db_user]}" -e "create database ${config[new_instance_name]} charset utf8"
}

function sync_db {
  echo "Syncing db"
  export MYSQL_PWD="${config[db_password]}"
  mysqldump -u "${config[db_user]}" "${config[old_instance_name]}" | mysql -u "${config[db_user]}" -D "${config[new_instance_name]}"
  # mysqldbcopy
}

function adjust_db {
  export MYSQL_PWD="${config[db_password]}"
  mysql -u "${config[db_user]}" -D "${config[new_instance_name]}" -e "UPDATE core_config_data SET value='http://${config[new_instance_name]}.${config[domain]}' WHERE path='web/unsecure/base_url'"
  mysql -u "${config[db_user]}" -D "${config[new_instance_name]}" -e "UPDATE core_config_data SET value='http://${config[new_instance_name]}.${config[domain]}' WHERE path='web/secure/base_url'"
}

function copy_nginx_conf {
  echo "Copy nginx conf"
  cp -an "/etc/nginx/sites-available/${config[old_instance_name]}.${config[domain]}" "/etc/nginx/sites-available/${config[new_instance_name]}.${config[domain]}"
}

function adjust_nginx_conf {
  echo "Adjust nginx conf"
  sed -i "/etc/nginx/sites-available/${config[new_instance_name]}.${config[domain]}" -e "s/${config[old_instance_name]}/${config[new_instance_name]}/g"
  # replace the full server_name directive?
}

function enable_nginx_site {
  echo "Enable nginx site"
  ln -s "/etc/nginx/sites-available/${config[new_instance_name]}.${config[domain]}" "/etc/nginx/sites-enabled/${config[new_instance_name]}.${config[domain]}"
}

function restart_nginx {
  echo "Restarting nginx"
  systemctl nginx restart
}

if [ $# -eq 0 ]
  then
  echo "Cloning shop in noninteractive mode in 2 seconds."
  echo "Abort using CTRL+C and run with -i parameter if you want finer"
  echo " control about what's happening"
  # Non-interactive. Yes we need refactoring here.
  sync_files
  adjust_app_conf
  create_db
  sync_db
  adjust_db
  copy_nginx_conf
  adjust_nginx_conf
  enable_nginx_site
  restart_nginx

  exit 0
fi

read -p "Sync files? y/n/q: " sync_files_ynq
if [ "${sync_files_ynq}" == "y" ] ; then
  sync_files
elif [ "${sync_files_ynq}" == "q" ] ; then
  exit 1
else
  echo "Skipping file sync"
fi

echo
read -p "Adjust app conf (db)? y/n/q: " adjust_app_conf_ynq
if [ "${adjust_app_conf_ynq}" == "y" ] ; then
  adjust_app_conf
elif [ "${adjust_app_conf_ynq}" == "q" ] ; then
  exit 1
else
  echo "Skipping app conf"
fi

echo
read -p "Create and sync db? y/n/q: " create_syncdb_ynq
if [ "${create_syncdb_ynq}" == "y" ] ; then
  create_db
  sync_db
  adjust_db
elif [ "${create_syncdb_ynq}" == "q" ] ; then
  exit 1
else
  echo "Skipping db stuff"
fi

echo
read -p "Configure nginx? y/n/q: " configure_nginx_ynq
if [ "${configure_nginx_ynq}" == "y" ] ; then
  copy_nginx_conf
  adjust_nginx_conf
  enable_nginx_site
elif [ "${configure_nginx_ynq}" == "q" ] ; then
  exit 1
else
  echo "Skipping nginx conf"
fi

echo
read -p "Restart nginx service? y/n/q: " restart_nginx_ynq
if [ "${restart_nginx_ynq}" == "y" ] ; then
  restart_nginx
elif [ "${restart_nginx_ynq}" == "q" ] ; then
  exit 1
else
  echo "Skipping nginx restart"
fi

# Exit with grace.
exit 0
